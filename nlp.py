# -*- coding: utf-8 -*-
"""Project_NLP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-K9KafbkJUtbqq_7wm4FUBUr6KIgOIH_

# ***Movie Review***

- This project focuses on sentiment analysis using an IMDB movie review dataset, aiming to classify reviews as positive or negative.

- By leveraging machine learning models such as Logistic Regression, Multinomial Naive Bayes, and Linear SVC, this study explores their performance in accurately predicting sentiments.

- The analysis provides valuable insights into the applicability of NLP techniques in real-world text-based data classification tasks.
"""

import pandas as pd
import re
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('/content/drive/MyDrive/Data Science/Project/IMDB Dataset.csv')

df.head()

df.tail()

df.shape

df.columns

df['review'].value_counts()

df.info()

df.duplicated().any()

df.duplicated().sum()

text = df['review']

type(text)

text1=[]

for txt in df['review']:
    # Convert to lowercase
    txt = txt.lower()
    # Remove <br> tags
    txt = re.sub(r'<br\s*/?>', ' ', txt)
    # Remove special characters and digits
    txt = re.sub(r'\W', ' ', txt)
    txt = re.sub(r'\d', ' ', txt)
    # Remove extra spaces
    txt = re.sub(r'\s+', ' ', txt).strip()
    # Append cleaned text to text1
    text1.append(txt)

text1

text=pd.Series(text1)

import nltk
nltk.download('punkt_tab')

from nltk.tokenize import word_tokenize
text = text.apply(lambda x:' '.join([w for w in word_tokenize(x) if len(w)>=3]))

text

# lowecase conversion and normalization(convert in to root form or cut the tail part)
from nltk.stem import SnowballStemmer
stemmer = SnowballStemmer('english')
text = text.apply(lambda x:[stemmer.stem(i.lower()) for i in word_tokenize(x)]).apply(lambda x:' '.join(x))

text

nltk.download('stopwords')

from nltk.corpus import stopwords
stop = stopwords.words('english')
text = text.apply(lambda x:[i for i in word_tokenize(x) if i not in stop]).apply(lambda x:' '.join(x))

text

from sklearn.feature_extraction.text import TfidfVectorizer
vec = TfidfVectorizer()
train_data_vec = vec.fit_transform(text)

print(train_data_vec)

train_data_vec.shape

type(train_data_vec)

y = df['sentiment'].values

y

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(train_data_vec,y,test_size=0.2,random_state=0)



plt.figure(figsize=(8, 5))
sns.countplot(data=df, x='sentiment', palette='viridis')
plt.title("Distribution of Sentiments", fontsize=16)
plt.xlabel("Sentiment", fontsize=12)
plt.ylabel("Count", fontsize=12)
plt.show()

#Horizontal bar

plt.figure(figsize=(10, 5))
plt.barh(y=df['sentiment'].value_counts().index, width=df['sentiment'].value_counts(), height=0.8, color=['green', 'red'])
plt.title("Moview review Length by pos/neg Labels")
plt.xlabel("Count of reviews")
plt.ylabel("Sentiment (Positive/Negative)")
plt.show()

#Box plot
plt.figure(figsize=(10,5))
sns.boxplot(x=df['sentiment'],y=df['review'].str.len())
plt.show()

#lineplot

plt.figure(figsize=(10, 5))
sns.lineplot(x=df['sentiment'], y=df['review'].str.len(), ci=None)
plt.title("review Length by pos/neg Labels")
plt.xlabel("sentiment (Positive/Negative)")
plt.ylabel("review Length")
plt.show()

"""MODEL EVALUATION OF

LogisticRegression()
"""

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()
model.fit(x_train,y_train)

y_pred = model.predict(x_test)

from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred)

x_test_pred = model.predict(x_test)
test_accuracy = accuracy_score(y_test,x_test_pred)
test_accuracy

import numpy as np

"""MODEL EVALUATION OF

MultinomialNB()
"""

from sklearn.naive_bayes import MultinomialNB
model1 = MultinomialNB()

model1.fit(x_train,y_train)

y_pred1 = model.predict(x_test)
y_pred1

from sklearn.metrics import accuracy_score
accuracy_score(y_test,y_pred1)

from sklearn.metrics import confusion_matrix
conf_matrix = confusion_matrix(y_test, y_pred1)
conf_matrix

#Heatmap
plt.figure(figsize=(6, 4))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Spectral", xticklabels=['positive', 'negative'], yticklabels=['pos', 'neg'])
plt.xlabel("Predicted sentiment")
plt.ylabel("True sentiment")
plt.title("Confusion Matrix")
plt.show()

from sklearn.naive_bayes import MultinomialNB

nb_model = MultinomialNB()
nb_model.fit(x_train, y_train)

# Predictions and evaluation
y_pred_nb = nb_model.predict(x_test)
print("Naive Bayes Accuracy:", accuracy_score(y_test, y_pred_nb))

"""MODEL EVALUATION OF

LinearSVC
"""

import pandas as pd

results = {
    'Model': ['Logistic Regression', 'MultinomialNB','Linear SVC'],
    'Accuracy': [accuracy_score(y_test, y_pred), accuracy_score(y_test, y_pred1), accuracy_score(y_test, y_pred_nb)]
}

results_df = pd.DataFrame(results)
print(results_df)

plt.figure(figsize=(8, 5))
sns.barplot(data=results_df, x='Model', y='Accuracy', palette='viridis')

plt.title('Model Accuracy Comparison', fontsize=16)
plt.xlabel('Model', fontsize=12)
plt.ylabel('Accuracy', fontsize=12)

for index, row in results_df.iterrows():
    plt.text(index, row['Accuracy'], f"{row['Accuracy']:.2f}", color='black', ha="center")

plt.show()

# New prediction
sample = "The movie was a letdown with a predictable plot, poorly developed characters, and dull visuals. The pacing dragged, and the performances felt uninspired. Overall, it lacked originality and failed to engage."

print("The result of sample message :  " ,model.predict(vec.transform([sample])))

# New prediction
sample = "A visually stunning masterpiece that captivates with its heartfelt storytelling and exceptional performances. A must-watch for anyone who loves cinema!"

print("The result of sample message :  " ,model.predict(vec.transform([sample])))

"""***Conclusion***


- This project successfully demonstrates the power of NLP techniques in processing and analyzing textual data for sentiment classification.

- Through a detailed evaluation of Logistic Regression, Multinomial Naive Bayes, and Linear SVC models, the study highlights their strengths and limitations.

- Among these, LogisticRegression() stood out as the most effective, achieving the highest accuracy.

- These findings underscore the potential of machine learning in deriving actionable insights from text data, paving the way for further advancements in sentiment analysis.


"""